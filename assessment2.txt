 
 Exercise 1.
 
 1.Create 'customers' and 'orders' collections and insert data into them
// Inserting 5 customers into the 'customers' collection

db.customers.insertMany([
    { 
        name: "John Doe", 
        email: "johndoe@example.com", 
        address: { street: "123 Main St", city: "Springfield", zipcode: "12345" }, 
        phone: "555-1234", 
        registration_date: new Date("2023-01-01T12:00:00Z")
    },
    { 
        name: "Jane Smith", 
        email: "janesmith@example.com", 
        address: { street: "456 Oak St", city: "Shelbyville", zipcode: "67890" }, 
        phone: "555-5678", 
        registration_date: new Date("2023-02-15T14:00:00Z")
    },
    { 
        name: "Bob Johnson", 
        email: "bobjohnson@example.com", 
        address: { street: "789 Pine St", city: "Capitol City", zipcode: "10112" }, 
        phone: "555-2345", 
        registration_date: new Date("2023-03-01T15:30:00Z")
    },
    { 
        name: "Alice Williams", 
        email: "alicewilliams@example.com", 
        address: { street: "101 Elm St", city: "Greenwich", zipcode: "20234" }, 
        phone: "555-3456", 
        registration_date: new Date("2023-04-10T16:00:00Z")
    },
    { 
        name: "Charlie Brown", 
        email: "charliebrown@example.com", 
        address: { street: "202 Maple St", city: "Centerville", zipcode: "30345" }, 
        phone: "555-4567", 
        registration_date: new Date("2023-05-20T17:30:00Z")
    }
]);

2. Insert 5 orders into the 'orders' collection
db.orders.insertMany([
    { 
        order_id: "ORD123456", 
        customer_id: db.customers.findOne({ name: "John Doe" })._id, 
        order_date: new Date("2023-05-15T14:00:00Z"), 
        status: "shipped", 
        items: [
            { product_name: "Laptop", quantity: 1, price: 1500 },
            { product_name: "Mouse", quantity: 2, price: 25 }
        ],
        total_value: 1550
    },
    { 
        order_id: "ORD123457", 
        customer_id: db.customers.findOne({ name: "Jane Smith" })._id, 
        order_date: new Date("2023-06-10T10:00:00Z"), 
        status: "shipped", 
        items: [
            { product_name: "Keyboard", quantity: 1, price: 100 },
            { product_name: "Monitor", quantity: 1, price: 300 }
        ],
        total_value: 400
    },
    { 
        order_id: "ORD123458", 
        customer_id: db.customers.findOne({ name: "Bob Johnson" })._id, 
        order_date: new Date("2023-07-15T12:30:00Z"), 
        status: "pending", 
        items: [
            { product_name: "Phone", quantity: 1, price: 700 }
        ],
        total_value: 700
    },
    { 
        order_id: "ORD123459", 
        customer_id: db.customers.findOne({ name: "Alice Williams" })._id, 
        order_date: new Date("2023-08-20T13:15:00Z"), 
        status: "shipped", 
        items: [
            { product_name: "Tablet", quantity: 1, price: 400 }
        ],
        total_value: 400
    },
    { 
        order_id: "ORD123460", 
        customer_id: db.customers.findOne({ name: "Charlie Brown" })._id, 
        order_date: new Date("2023-09-05T11:45:00Z"), 
        status: "delivered", 
        items: [
            { product_name: "Headphones", quantity: 1, price: 150 }
        ],
        total_value: 150
    }
]);


3. Find all orders placed by the customer "John Doe"
const customer = db.customers.findOne({ name: "John Doe" });
const orders = db.orders.find({ customer_id: customer._id }).toArray();
printjson(orders);



4. Find the customer information for the order with order_id "ORD123456"
const order = db.orders.findOne({ order_id: "ORD123456" });
const customerForOrder = db.customers.findOne({ _id: order.customer_id });
printjson(customerForOrder);


5. Update the status of the order with order_id "ORD123456" to "delivered"
db.orders.updateOne(
    { order_id: "ORD123456" },
    { $set: { status: "delivered" } }
);


6. Delete the order with order_id "ORD123456"
db.orders.deleteOne({ order_id: "ORD123456" });


Exercise 2.


1. Calculate Total Value of All Orders by Customer
db.orders.aggregate([
    {
        $lookup: {
            from: "customers",
            localField: "customer_id",
            foreignField: "_id",
            as: "customer_info"
        }
    },
    {
        $unwind: "$customer_info"
    },
    {
        $group: {
            _id: "$customer_info.name",
            total_order_value: { $sum: "$total_value" }
        }
    },
    {
        $project: {
            customer_name: "$_id",
            total_order_value: 1,
            _id: 0
        }
    }
]);



2. Group Orders by Status
db.orders.aggregate([
    {
        $group: {
            _id: "$status",
            count: { $sum: 1 }
        }
    },
    {
        $project: {
            status: "$_id",
            count: 1,
            _id: 0
        }
    }
]);

3. List Customers with Their Recent Orders
db.orders.aggregate([
    {
        $lookup: {
            from: "customers",
            localField: "customer_id",
            foreignField: "_id",
            as: "customer_info"
        }
    },
    {
        $unwind: "$customer_info"
    },
    {
        $sort: { "order_date": -1 } // Sort by order date descending
    },
    {
        $group: {
            _id: "$customer_id",
            most_recent_order: { $first: "$$ROOT" },
            customer_info: { $first: "$customer_info" }
        }
    },
    {
        $project: {
            "customer_info.name": 1,
            "customer_info.email": 1,
            "most_recent_order.order_id": 1,
            "most_recent_order.total_value": 1,
            "most_recent_order.order_date": 1
        }
    }
]);


4. Find the Most Expensive Order by Customer
db.orders.aggregate([
    {
        $lookup: {
            from: "customers",
            localField: "customer_id",
            foreignField: "_id",
            as: "customer_info"
        }
    },
    {
        $unwind: "$customer_info"
    },
    {
        $group: {
            _id: "$customer_id",
            most_expensive_order: { $max: "$total_value" },
            order_details: { $first: "$$ROOT" },
            customer_info: { $first: "$customer_info" }
        }
    },
    {
        $project: {
            "customer_info.name": 1,
            "order_details.order_id": 1,
            "most_expensive_order": "$most_expensive_order",
            "order_details.total_value": 1
        }
    }
]);


Exercise 3.

1. Find All Customers Who Placed Orders in the Last Month
const thirtyDaysAgo = new Date();
thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);

db.orders.aggregate([
    {
        $match: { order_date: { $gte: thirtyDaysAgo } }
    },
    {
        $lookup: {
            from: "customers",
            localField: "customer_id",
            foreignField: "_id",
            as: "customer_info"
        }
    },
    {
        $unwind: "$customer_info"
    },
    {
        $group: {
            _id: "$customer_id",
            customer_name: { $first: "$customer_info.name" },
            customer_email: { $first: "$customer_info.email" },
            most_recent_order_date: { $max: "$order_date" }
        }
    },
    {
        $project: {
            customer_name: 1,
            customer_email: 1,
            most_recent_order_date: 1
        }
    }
]);


2. Find All Products Ordered by a Specific Customer
const customer = db.customers.findOne({ name: "John Doe" });

db.orders.aggregate([
    {
        $match: { customer_id: customer._id }
    },
    {
        $unwind: "$items"
    },
    {
        $group: {
            _id: "$items.product_name",
            total_quantity: { $sum: "$items.quantity" }
        }
    },
    {
        $project: {
            product_name: "$_id",
            total_quantity: 1,
            _id: 0
        }
    }
]);


3. Find the Top 3 Customers with the Most Expensive Total Orders
db.orders.aggregate([
    {
        $lookup: {
            from: "customers",
            localField: "customer_id",
            foreignField: "_id",
            as: "customer_info"
        }
    },
    {
        $unwind: "$customer_info"
    },
    {
        $group: {
            _id: "$customer_id",
            customer_name: { $first: "$customer_info.name" },
            total_spent: { $sum: "$total_value" }
        }
    },
    {
        $sort: { total_spent: -1 }
    },
    {
        $limit: 3
    },
    {
        $project: {
            customer_name: 1,
            total_spent: 1
        }
    }
]);

4. Add a New Order for an Existing Customer

const customer = db.customers.findOne({ name: "Jane Smith" });

db.orders.insertOne({
    order_id: "ORD123461",
    customer_id: customer._id,
    order_date: new Date(),
    status: "pending",
    items: [
        { product_name: "Smartphone", quantity: 1, price: 800 },
        { product_name: "Headphones", quantity: 1, price: 150 }
    ],
    total_value: 950
});


Ecercise 4.
1. Find Customers Who Have Not Placed Orders

db.customers.aggregate([
    {
        $lookup: {
            from: "orders",
            localField: "_id",
            foreignField: "customer_id",
            as: "orders"
        }
    },
    {
        $match: { orders: { $size: 0 } } // Select customers with an empty "orders" array
    },
    {
        $project: {
            name: 1,
            email: 1
        }
    }
]);

2. Calculate the Average Number of Items Ordered per Order

db.orders.aggregate([
    {
        $project: {
            num_items: { $size: "$items" }
        }
    },
    {
        $group: {
            _id: null,
            avg_items_per_order: { $avg: "$num_items" }
        }
    },
    {
        $project: {
            avg_items_per_order: 1,
            _id: 0
        }
    }
]);


3. Join Customer and Order Data Using $lookup
db.orders.aggregate([
    {
        $lookup: {
            from: "customers",
            localField: "customer_id",
            foreignField: "_id",
            as: "customer_info"
        }
    },
    {
        $unwind: "$customer_info"
    },
    {
        $project: {
            "customer_name": "$customer_info.name",
            "customer_email": "$customer_info.email",
            "order_id": 1,
            "total_value": 1,
            "order_date": 1
        }
    }
]);

